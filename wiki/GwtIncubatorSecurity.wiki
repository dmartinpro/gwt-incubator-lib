#summary Quick presentation

= How it is supposed to work =

The package provide several things that should be describe first :
  * An extended AsyncCallback named SecuredAsyncCallback
  * A new GWTHandler (@see GWT-SL documentation) called GWTSecuredHandler
  * A set of exceptions that translates spring exceptions types in a GWT equivalence

Now, I can explain how all this cool stuff works :

First you have to set up a Spring Security configuration. You can choose to protect your RPC call with the different strategies Spring Security allows :

  * through AOP (Annotation @Secured or pointcut definition : <protect-pointcut .../> )
  * through URL filtering (<intercept-url... />)

Both solutions work but annotation is my preferred choice.

Once this is done, you have to extend SecuredAsyncCallback on every RPC call to be able to use the security management. That way, you'll have to implement 3 methods instead of the 2 (onSuccess and onFailure) :

  * onSuccess : after all, this is the most important case isn't it ?
  * onSecurityException(final ApplicationSecurityException exception)
  * onOtherException(final Throwable exception)

You can easily understand what the meaning of each of these methods is, can't you ?

The second important point is to declare on each method of your RemoteService interface ApplicationSecurityException as an exception that could be thrown. Yes, I know, that can be a little bit annoying, but hey, I didn't find any other way to do. Fell free to give me advices on this point.

Example :
{{{
public interface SimpleRPCService extends RemoteService {

	@Secured({"ROLE_SUPERVISOR"})
	MyObject getData() throws ApplicationSecurityException;

}

}}}

So, it's time to give it a try right now !